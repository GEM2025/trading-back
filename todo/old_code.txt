
    // -----------------------------------------------------------------------------------
    const OppositeSide = (Side: string): string => {
        return Side.toLowerCase() === "long" ? "Short" : (Side.toLocaleLowerCase() === "short" ? "Long" : "N/A");
    }

    // -----------------------------------------------------------------------------------
    const OppositeName = (symbol: Interfaces.Symbol): string => {
        return `${symbol.pair.term}/${symbol.pair.base}`;
    }
    

















    // Duet -----------------------------------------------------------------------------------
    export const InitializeDuets3rd = (first: Interfaces.Symbol, second_symbol: Interfaces.Symbol, open: string, hedge: string) => {

        const key_prev = `${open} ${first.exchange} ${first.name} ${hedge} ${second_symbol.exchange} ${second_symbol.name}`;
        if (!AlgorithmsService.Markets.has(key_prev)) {

            // ask side - the arb will start selling the first name
            const duet = new Set<KeyValuePair<string, Interfaces.Symbol>>();
            const side_symbol_1 = new KeyValuePair<string, Interfaces.Symbol>(OppositeSide(open), first);
            const side_symbol_2 = new KeyValuePair<string, Interfaces.Symbol>(OppositeSide(hedge), second_symbol);
            duet.add(side_symbol_1);
            duet.add(side_symbol_2);
            AlgorithmsService.Markets.set(key_prev, duet);
        }
        else {
            LoggerService.logger.error(`Cannot add duet ${key_prev}`);
        }

    }


    // Duet -----------------------------------------------------------------------------------
    export const InitializeDuets2nd = (first: Interfaces.Symbol, open: string, base: string, hedge: string, term: string) => {

        const second_symbols = GlobalsServices.SymbolsDict.get(term + '/' + base) || [];
        if (second_symbols) {

            for (const second_symbol of second_symbols) {

                // 3. Look for full circle names (duets cannot appear in the same exchange)
                if (first.exchange !== second_symbol.exchange) {

                    if (open !== hedge && first.name === second_symbol.name || open === hedge && first.name === OppositeName(second_symbol)) {

                        AlgorithmsService.InitializeDuets3rd(first, second_symbol, open, hedge);

                        // 3.1 Long/Long Duplets
                        // const key = `${open} ${second_symbol.exchange} ${second_symbol.name} ${hedge} ${first.exchange} ${first.name}`;
                        // if (AlgorithmsService.Markets.has(key)) {
                        //     AlgorithmsService.InitializeDuets3rd(first, second_symbol, OppositeSide(open), OppositeSide(hedge));
                        // }
                        // else {
                        //     AlgorithmsService.InitializeDuets3rd(first, second_symbol, open, hedge);
                        // }
                    }
                }
            }
        }
    }

    // Duet -----------------------------------------------------------------------------------
    export const InitializeDuets = (first: Interfaces.Symbol) => {

        // 2. From right hand (term) lookp names on secon exchanges with the same value on any hand
        const base = first.pair.base;
        const term = first.pair.term;

        // Long USD/MXN vs Long MXN/USD - Left side
        // Short USD/MXN vs Short MXN/USD - Right side
        AlgorithmsService.InitializeDuets2nd(first, "Long", base, "Long", term);

        // Long USD/MXN vs Short USD/MXN - Left Side
        // Short USD/MXN vs Long USD/MXN - Right Side
        AlgorithmsService.InitializeDuets2nd(first, "Long", term, "Short", base);

    }


    // Triplet -----------------------------------------------------------------------------------
    export const InitializeTriplets3rd = (first: Interfaces.Symbol, second_symbol: Interfaces.Symbol, third_symbol: Interfaces.Symbol, open: string, base: string, hedge: string, term: string) => {

        const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
        if (!Markets.has(key_short)) {

            const triplet = new Set<KeyValuePair<string, Interfaces.Symbol>>();
            const side_symbol_1 = new KeyValuePair<string, Interfaces.Symbol>("Short", first);
            const side_symbol_2 = new KeyValuePair<string, Interfaces.Symbol>("Short", second_symbol);
            const side_symbol_3 = new KeyValuePair<string, Interfaces.Symbol>("Short", third_symbol);
            triplet.add(side_symbol_1);
            triplet.add(side_symbol_2);
            triplet.add(side_symbol_3);
            Markets.set(key_short, triplet);

        }
        else {
            LoggerService.logger.error(`Cannot add triplet ${key_short}`);

        }
    }

    // Triplet -----------------------------------------------------------------------------------
    export const InitializeTriplets2nd = (first: Interfaces.Symbol, second_symbol: Interfaces.Symbol, open: string, base: string, hedge: string, term: string) => {

        const third_symbols = GlobalsServices.SymbolsDict.get(second_symbol.pair.term + '/' + first.pair.base) || [];
        for (const third_symbol of third_symbols.values()) {

            // 4.1.1 Long/Long/Long Triplets

            const key = `Long ${second_symbol.exchange} ${second_symbol.name} Long ${first.exchange} ${first.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
            if (Markets.has(key)) {

                const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                if (!Markets.has(key_short)) {

                    const triplet = new Set<KeyValuePair<string, Interfaces.Symbol>>();
                    const side_symbol_1 = new KeyValuePair<string, Interfaces.Symbol>("Short", first);
                    const side_symbol_2 = new KeyValuePair<string, Interfaces.Symbol>("Short", second_symbol);
                    const side_symbol_3 = new KeyValuePair<string, Interfaces.Symbol>("Short", third_symbol);
                    triplet.add(side_symbol_1);
                    triplet.add(side_symbol_2);
                    triplet.add(side_symbol_3);
                    Markets.set(key_short, triplet);

                }
                else {
                    LoggerService.logger.error(`Cannot add triplet ${key_short}`);
                }

            }
            else {

                const key_long = `Long ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                if (!Markets.has(key_long)) {

                    const triplet = new Set<KeyValuePair<string, Interfaces.Symbol>>();
                    const side_symbol_1 = new KeyValuePair<string, Interfaces.Symbol>("Long", first);
                    const side_symbol_2 = new KeyValuePair<string, Interfaces.Symbol>("Long", second_symbol);
                    const side_symbol_3 = new KeyValuePair<string, Interfaces.Symbol>("Long", third_symbol);
                    triplet.add(side_symbol_1);
                    triplet.add(side_symbol_2);
                    triplet.add(side_symbol_3);
                    Markets.set(key_long, triplet);

                }
                else {
                    LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                }
            }

        }
    }

    // Triplet -----------------------------------------------------------------------------------
    export const InitializeTriplets1st = (first: Interfaces.Symbol, open: string, base: string, hedge: string, term: string) => {

        // take right-hand termn and look for name with that term at the left hand base
        const second_symbols = GlobalsServices.BaseDict.get(term) || [];
        for (const second_symbol of second_symbols) {

            InitializeTriplets2nd(first, second_symbol, open, base, hedge, term);


            // {

            // const third_symbols = GlobalsServices.SymbolsDict.get(second_symbol.pair.term + '/' + first.pair.base) || [];
            // for (const third_symbol of third_symbols.values()) {

            // // 4.1.1 Long/Long/Long Triplets

            // const key = `Long ${second_symbol.exchange} ${second_symbol.name} Long ${first.exchange} ${first.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
            // if (Markets.has(key)) {

            //     const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
            //     if (!Markets.has(key_short)) {

            //         const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
            //         const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
            //         const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
            //         const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
            //         triplet.add(side_symbol_1);
            //         triplet.add(side_symbol_2);
            //         triplet.add(side_symbol_3);
            //         Markets.set(key_short, triplet);

            //     }
            //     else {
            //         LoggerService.logger.error(`Cannot add triplet ${key_short}`);
            //     }

            // }
            // else {

            //     const key_long = `Long ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
            //     if (!Markets.has(key_long)) {

            //         const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
            //         const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
            //         const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
            //         const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
            //         triplet.add(side_symbol_1);
            //         triplet.add(side_symbol_2);
            //         triplet.add(side_symbol_3);
            //         Markets.set(key_long, triplet);

            //     }
            //     else {
            //         LoggerService.logger.error(`Cannot add triplet ${key_long}`);
            //     }
            // }

            // }

            // }

            InitializeTriplets2nd(first, second_symbol, open, base, OppositeSide(hedge), term);

            //     {
            //         const third_symbols = GlobalsServices.SymbolsDict.get(first.pair.base + '/' + second_symbol.pair.term) || [];
            //         for (const third_symbol of third_symbols.values()) {

            //             // 4.1.2 Long/Long/Short Triplets

            //             const key = `Long ${second_symbol.exchange} ${second_symbol.name} Long ${first.exchange} ${first.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
            //             if (!Markets.has(key)) {

            //                 const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
            //                 if (!Markets.has(key_short)) {

            //                     const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
            //                     const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
            //                     const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
            //                     const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
            //                     triplet.add(side_symbol_1);
            //                     triplet.add(side_symbol_2);
            //                     triplet.add(side_symbol_3);
            //                     Markets.set(key_short, triplet);

            //                 }
            //                 else {
            //                     LoggerService.logger.error(`Cannot add triplet ${key_short}`);
            //                 }
            //             }
            //             else {

            //                 const key_long = `Long ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
            //                 if (!Markets.has(key_long)) {

            //                     const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
            //                     const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
            //                     const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
            //                     const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
            //                     triplet.add(side_symbol_1);
            //                     triplet.add(side_symbol_2);
            //                     triplet.add(side_symbol_3);
            //                     Markets.set(key_long, triplet);

            //                 }
            //                 else {
            //                     LoggerService.logger.error(`Cannot add triplet ${key_long}`);
            //                 }
            //             }
            //         }
            //     }
        }
    }



{
      // 4.1 Long/Long/* Triplets
        if (false) {
            const second_symbols = GlobalsServices.BaseDict.get(first.pair.term) || [];
            for (const second_symbol of second_symbols.values()) {

                {
                    const third_symbols = GlobalsServices.SymbolsDict.get(second_symbol.pair.term + '/' + first.pair.base) || [];
                    for (const third_symbol of third_symbols.values()) {

                        // 4.1.1 Long/Long/Long Triplets

                        const key = `Long ${second_symbol.exchange} ${second_symbol.name} Long ${first.exchange} ${first.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                        if (Markets.has(key)) {

                            const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_short)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                 Markets.set(key_short, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_short}`);
                            }

                        }
                        else {

                            const key_long = `Long ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }
                        }

                    }
                }

                {
                    const third_symbols = GlobalsServices.SymbolsDict.get(first.pair.base + '/' + second_symbol.pair.term) || [];
                    for (const third_symbol of third_symbols.values()) {

                        // 4.1.2 Long/Long/Short Triplets

                        const key = `Long ${second_symbol.exchange} ${second_symbol.name} Long ${first.exchange} ${first.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                        if (!Markets.has(key)) {

                            const key_short = `Short ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_short)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_short, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_short}`);
                            }
                        }
                        else {

                            const key_long = `Long ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }
                        }
                    }
                }
            }
        }


        // 4.2 Long/Short/* Triplets
        if (false) {
            const second_symbols = GlobalsServices.TermDict.get(first.pair.term) || [];
            for (const second_symbol of second_symbols.values()) {

                {
                    const third_symbols = GlobalsServices.SymbolsDict.get(second_symbol.pair.base + '/' + first.pair.base) || [];
                    for (const third_symbol of third_symbols.values()) {

                        // 4.2.1 Long/Short/Long Triplets

                        const key = `Long ${second_symbol.exchange} ${second_symbol.name} Short ${first.exchange} ${first.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                        if (!Markets.has(key)) {

                            const key_long = `Short ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }

                        }
                        else {

                            const key_long = `Long ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }
                        }
                    }
                }

                {
                    const third_symbols = GlobalsServices.SymbolsDict.get(first.pair.base + '/' + second_symbol.pair.base) || [];
                    for (const third_symbol of third_symbols.values()) {

                        // 4.2.2 Long/Short/Short Triplets

                        const key = `Long ${second_symbol.exchange} ${second_symbol.name} Short ${first.exchange} ${first.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                        if (!Markets.has(key)) {

                            const key_long = `Short ${first.exchange} ${first.name} Long ${second_symbol.exchange} ${second_symbol.name} Long ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Short", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Long", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Long", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }

                        }
                        else {

                            const key_long = `Long ${first.exchange} ${first.name} Short ${second_symbol.exchange} ${second_symbol.name} Short ${third_symbol.exchange} ${third_symbol.name}`;
                            if (!Markets.has(key_long)) {

                                const triplet = new Set<KeyValuePair<string, CondorInterface.Symbol>>();
                                const side_symbol_1 = new KeyValuePair<string, CondorInterface.Symbol>("Long", first);
                                const side_symbol_2 = new KeyValuePair<string, CondorInterface.Symbol>("Short", second_symbol);
                                const side_symbol_3 = new KeyValuePair<string, CondorInterface.Symbol>("Short", third_symbol);
                                triplet.add(side_symbol_1);
                                triplet.add(side_symbol_2);
                                triplet.add(side_symbol_3);
                                Markets.set(key_long, triplet);

                            }
                            else {
                                LoggerService.logger.error(`Cannot add triplet ${key_long}`);
                            }
                        }
                    }
                }
            }
        }
}